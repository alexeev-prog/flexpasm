from flexpasm.settings import Settings
from flexpasm.templates import MnemonicTemplate


class _ASMFileHandler:
	@staticmethod
	def save(filename: str, content: str, flag: str = 'w'):
		with open(filename, flag) as file:
			file.write(content)


class ASMProgram:
	def __init__(self, settings: Settings):
		self.settings = settings
		self._code = []
		self._code.append(self._generate_start_description())

	def add_template(self, template: MnemonicTemplate):
		self._code.append(template.generate(self.settings.mnemonix_syntax, self.settings.indentation))

	def _generate_start_description(self) -> str:
		title = f';; {self.settings.title}'
		author = f';; Author: {self.settings.author}'
		end = ';; Program generated by FLEXPASM (github.com/alexeev-pro/flexpasm)'
		return f'''{";" * 80}
{author}{' ' * (78 - len(author))};;
{title}{' ' * (78 - len(title))};;
{end}{' ' * (78 - len(end))};;
{";" * 80}

format ELF executable 3
entry start
'''
	
	def get_source_code(self) -> str:
		return "\n".join(self._code)

	def save_code(self):
		_ASMFileHandler.save(self.settings.filename, self.get_source_code())
